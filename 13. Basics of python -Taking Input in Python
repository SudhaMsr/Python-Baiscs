{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ff71156e-b090-47e9-8f51-b343ef97aca7",
   "metadata": {},
   "source": [
    "####"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7807001-990d-4ea8-8fcd-b5e9d1574b7b",
   "metadata": {},
   "source": [
    "\n",
    "# üñäÔ∏è **Taking Input in Python**\n",
    "\n",
    "Python allows users to interact with programs by providing input from the keyboard.\n",
    "\n",
    "---\n",
    "\n",
    "## üîπ **The `input()` Function**\n",
    "\n",
    "* The built-in function `input()` is used to take input from the user.\n",
    "* By default, it **returns the input as a string**, even if the user types a number.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "080d58c2-72db-47c1-8ed1-39a7655d8bab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your name:  sudha\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, sudha\n"
     ]
    }
   ],
   "source": [
    "name = input(\"Enter your name: \")\n",
    "print(\"Hello,\", name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da4c7e5c-b7cc-459e-91e5-bab04c38ec1c",
   "metadata": {},
   "source": [
    "## üîπ **Converting Input (Type Casting)**\n",
    "\n",
    "Since everything from `input()` is a **string**, you often need to convert it to another type.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e8e054bb-f5e4-4672-a3ad-889e2a5c547c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your age:  78\n",
      "Enter your height in meters:  7.11\n"
     ]
    }
   ],
   "source": [
    "age = int(input(\"Enter your age: \"))   # Convert to integer\n",
    "height = float(input(\"Enter your height in meters: \"))  # Convert to float"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "173c4472-9f8a-4c20-a73d-6ff9523733e9",
   "metadata": {},
   "source": [
    "## üîπ **Taking Multiple Inputs**\n",
    "You can take several inputs at once using `split()`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e0cadf5-6d7c-4ac1-ad56-ef2f9b10aa92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter two numbers:  12 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You entered: 12 and 2\n"
     ]
    }
   ],
   "source": [
    "x, y = input(\"Enter two numbers: \").split()\n",
    "print(\"You entered:\", x, \"and\", y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e23fe4a-aaed-44ed-8453-d5918ac86989",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter two numbers:  12 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum: 14\n"
     ]
    }
   ],
   "source": [
    "### For numbers:\n",
    "a, b = map(int, input(\"Enter two numbers: \").split())\n",
    "print(\"Sum:\", a + b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44c4c0a3-2bf0-450a-9c0c-e8014236de1e",
   "metadata": {},
   "source": [
    "## üîπ **Input with Prompt**\n",
    "Adding a message inside `input()` makes it more user-friendly.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79469c34-1690-4eae-95f7-7ba43c41a875",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Which city do you live in?  hyd\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You live in hyd\n"
     ]
    }
   ],
   "source": [
    "city = input(\"Which city do you live in? \")\n",
    "print(\"You live in\", city)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a09bc0eb-5f7a-4699-b9e0-779de7395cbb",
   "metadata": {},
   "source": [
    "## üîπ **Key Notes**\n",
    "\n",
    "* Always **type cast** if you need numbers.\n",
    "* If no casting is done, the input remains a string.\n",
    "* Use `split()` and `map()` for multiple inputs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3710378c-b747-4dca-a90a-76d75eb23c09",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "‚úÖ **Quick Recap**\n",
    "\n",
    "* `input()` ‚Üí always returns string\n",
    "* `int()`, `float()` ‚Üí convert to numbers\n",
    "* `split()` ‚Üí multiple inputs\n",
    "* Always validate input in real applications\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae9481c",
   "metadata": {},
   "source": [
    "####"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f264f939-61fb-4ae4-87fe-aabfe94b73ba",
   "metadata": {},
   "source": [
    "\n",
    "---\n",
    "\n",
    "# üìå **Common Input Patterns in Python**\n",
    "\n",
    "| **Pattern**                 | **Code Example**                                              | **Notes**                        |\n",
    "| --------------------------- | ------------------------------------------------------------- | -------------------------------- |\n",
    "| **Single String Input**     | `name = input(\"Enter your name: \")`                           | Always returns string            |\n",
    "| **Integer Input**           | `age = int(input(\"Enter age: \"))`                             | Convert string ‚Üí int             |\n",
    "| **Float Input**             | `height = float(input(\"Enter height: \"))`                     | Convert string ‚Üí float           |\n",
    "| **Multiple String Inputs**  | `a, b = input(\"Enter two words: \").split()`                   | Splits by spaces (default)       |\n",
    "| **Multiple Integer Inputs** | `x, y = map(int, input(\"Enter two numbers: \").split())`       | Use `map()` for type casting     |\n",
    "| **List of Inputs**          | `nums = list(map(int, input(\"Enter numbers: \").split()))`     | Converts input into list of ints |\n",
    "| **Custom Separator**        | `a, b = input(\"Enter values (comma separated): \").split(\",\")` | Split by `,` instead of space    |\n",
    "\n",
    "---\n",
    "\n",
    "‚úÖ **Quick Tip**\n",
    "\n",
    "* Use `.split()` for multiple values.\n",
    "* Use `map()` for automatic type conversion.\n",
    "* Always provide a **prompt message** for clarity.\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9486d330-ef72-48fb-9252-818e8aa8f1bf",
   "metadata": {},
   "source": [
    "###"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40241feb-7020-4c5a-b1d1-047e3bb61868",
   "metadata": {},
   "source": [
    "\n",
    "---\n",
    "\n",
    "# **Taking Operator Input in Python**\n",
    "\n",
    "When building a calculator, you need to take **two numbers** and an **operator** (`+`, `-`, `*`, `/`, etc.) from the user.\n",
    "\n",
    "---\n",
    "\n",
    "## üîπ **Example: Simple Calculator**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b56afa20-15e3-4df0-9861-eb56ba55d140",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter first number:  2\n",
      "Enter operator (+, -, *, /):  +\n",
      "Enter second number:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 7.0\n"
     ]
    }
   ],
   "source": [
    "# Taking input from user\n",
    "num1 = float(input(\"Enter first number: \"))\n",
    "operator = input(\"Enter operator (+, -, *, /): \")\n",
    "num2 = float(input(\"Enter second number: \"))\n",
    "\n",
    "# Performing operation\n",
    "if operator == \"+\":\n",
    "    result = num1 + num2\n",
    "elif operator == \"-\":\n",
    "    result = num1 - num2\n",
    "elif operator == \"*\":\n",
    "    result = num1 * num2\n",
    "elif operator == \"/\":\n",
    "    if num2 != 0:\n",
    "        result = num1 / num2\n",
    "    else:\n",
    "        result = \"Error! Division by zero.\"\n",
    "else:\n",
    "    result = \"Invalid operator!\"\n",
    "\n",
    "print(\"Result:\", result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97d24892-75de-46af-8087-67cd16624fb8",
   "metadata": {},
   "source": [
    "### üìå **How it works**\n",
    "\n",
    "1. Take **numbers** using `input()` and convert them to `float`.\n",
    "2. Take the **operator** as a string.\n",
    "3. Use **if-elif-else** to check which operation to perform.\n",
    "4. Handle **division by zero** as a special case.\n",
    "\n",
    "---\n",
    "\n",
    "### üîπ **Sample Output**\n",
    "\n",
    "```\n",
    "Enter first number: 10\n",
    "Enter operator (+, -, *, /): *\n",
    "Enter second number: 5\n",
    "Result: 50.0\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## üîπ **Key Notes**\n",
    "\n",
    "* Operators are taken as **strings** (`+`, `-`, `*`, `/`).\n",
    "* Always **cast numbers** to `int` or `float` depending on requirement.\n",
    "* You can extend this logic for **more complex operations** (like modulus `%`, exponent `**`).\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bf1206b-fca6-48a6-b93e-19d19ffc89ae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e19594bb-9582-46fa-bda6-bc16b4e7439f",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "# **Using `eval()` for a Simple Calculator**\n",
    "\n",
    "The built-in Python function `eval()` **evaluates a string as a Python expression**. This means the user can enter the **whole expression at once**, including numbers and operator.\n",
    "\n",
    "---\n",
    "\n",
    "## üîπ **Example: Calculator Using `eval()`**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ce06bf83-9d8d-4766-899b-d8dc6a2441ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a calculation (e.g., 10 + 5):  4+8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 12\n"
     ]
    }
   ],
   "source": [
    "# Take the whole expression as input\n",
    "expression = input(\"Enter a calculation (e.g., 10 + 5): \")\n",
    "\n",
    "# Evaluate the expression\n",
    "try:\n",
    "    result = eval(expression)\n",
    "    print(\"Result:\", result)\n",
    "except ZeroDivisionError:\n",
    "    print(\"Error! Division by zero.\")\n",
    "except Exception:\n",
    "    print(\"Invalid input!\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e2d5efd-a034-41b6-b56d-a6d56dac5430",
   "metadata": {},
   "source": [
    "### üìå **How it works**\n",
    "\n",
    "1. The user types an expression like `\"10 + 5\"` or `\"8 / 2\"`.\n",
    "2. `eval()` evaluates the string as a Python expression.\n",
    "3. Use `try-except` to **handle errors** like division by zero or invalid input.\n",
    "\n",
    "---\n",
    "\n",
    "### üîπ **Sample Output**\n",
    "\n",
    "```\n",
    "Enter a calculation (e.g., 10 + 5): 12 * 4\n",
    "Result: 48\n",
    "```\n",
    "\n",
    "```\n",
    "Enter a calculation (e.g., 10 + 5): 10 / 0\n",
    "Error! Division by zero.\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "### ‚ö†Ô∏è **Important Notes**\n",
    "\n",
    "* `eval()` is **very powerful but risky** if used with untrusted input.\n",
    "* Never use it for input from **unknown users** in production, as it can execute arbitrary code.\n",
    "* For learning and small programs, it‚Äôs **safe for beginner calculators**.\n",
    "\n",
    "---\n",
    "\n",
    "This approach allows **taking numbers and operator together**, making the input cleaner and the code shorter.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78f3be11-3950-454d-bc7e-c37c357154c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "97a5e35b-20b7-4074-ac3f-343cb96f5473",
   "metadata": {},
   "source": [
    "\n",
    "---\n",
    "\n",
    "# üìù **Homework / Exercise: Build a Simple Calculator**\n",
    "\n",
    "**Objective:** Practice taking input from users and performing operations using both **if-elif statements** and the **`eval()` function**.\n",
    "\n",
    "---\n",
    "\n",
    "### **Tasks:**\n",
    "\n",
    "1. **Using `if-elif` method:**\n",
    "\n",
    "   * Take **two numbers** and an **operator** (`+`, `-`, `*`, `/`) from the user.\n",
    "   * Perform the operation using `if-elif-else` statements.\n",
    "   * Handle **division by zero**.\n",
    "\n",
    "2. **Using `eval()` method:**\n",
    "\n",
    "   * Take the **entire expression** as input (e.g., `\"10 + 5\"`).\n",
    "   * Evaluate it using `eval()`.\n",
    "   * Handle **errors** like invalid input or division by zero using `try-except`.\n",
    "\n",
    "---\n",
    "\n",
    "### **Bonus / Optional Challenges:**\n",
    "\n",
    "* Allow **more operators** such as `%`, `**` (modulus, exponent).\n",
    "* Allow **multiple calculations in a loop** until the user chooses to exit.\n",
    "* Make the calculator **user-friendly with prompts** and clear outputs.\n",
    "\n",
    "---\n",
    "\n",
    "üí° **Hint:**\n",
    "\n",
    "* For `if-elif`: use `input()` for numbers and operator, and `float()` for type casting.\n",
    "* For `eval()`: use `try-except` to catch errors.\n",
    "\n",
    "---\n",
    "\n",
    "This exercise helps readers **practice input handling, operators, conditional logic, and error handling** ‚Äî all in one small project!\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "603b426d-b22f-42c3-a6e5-5444952614e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
