{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b18c34d6-8f45-413b-ac2f-e28c7fe921af",
   "metadata": {},
   "source": [
    "###"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bde78e8-8477-4093-834a-1a783b21e121",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "# **Unicode in Python**\n",
    "\n",
    "Unicode is a **universal character encoding standard** that assigns a **unique number** to every character, symbol, or emoji across all languages.\n",
    "\n",
    "Python uses **Unicode (UTF-8 by default)** to represent text, which means it can handle characters from **English, Hindi, Chinese, Arabic, emojis, and many more**.\n",
    "\n",
    "---\n",
    "\n",
    "### üìå **Why Unicode is Important?**\n",
    "\n",
    "* Makes Python programs work across **different languages and platforms**.\n",
    "* Helps avoid **errors when dealing with special characters**.\n",
    "* Supports **modern applications** such as multilingual websites, chat apps with emojis, and global software.\n",
    "\n",
    "---\n",
    "\n",
    "### ‚ú® **Examples of Unicode Characters**\n",
    "\n",
    "* **English Characters**\n",
    "\n",
    "  * `\"A\"` ‚Üí Unicode: `U+0041`\n",
    "  * `\"a\"` ‚Üí Unicode: `U+0061`\n",
    "\n",
    "* **Numbers**\n",
    "\n",
    "  * `\"9\"` ‚Üí Unicode: `U+0039`\n",
    "\n",
    "* **Non-English Characters**\n",
    "\n",
    "  * `\"‡§π\"` (Hindi letter ‚Äúha‚Äù) ‚Üí Unicode: `U+0939`\n",
    "  * `\"‰Ω†\"` (Chinese character ‚Äúyou‚Äù) ‚Üí Unicode: `U+4F60`\n",
    "  * `\"ÿπ\"` (Arabic letter ‚Äúain‚Äù) ‚Üí Unicode: `U+0639`\n",
    "\n",
    "* **Symbols**\n",
    "\n",
    "  * `\"¬©\"` ‚Üí Unicode: `U+00A9`\n",
    "  * `\"‚Ç¨\"` ‚Üí Unicode: `U+20AC`\n",
    "\n",
    "* **Emojis**\n",
    "\n",
    "  * `\"üòä\"` ‚Üí Unicode: `U+1F60A`\n",
    "  * `\"üî•\"` ‚Üí Unicode: `U+1F525`\n",
    "\n",
    "---\n",
    "\n",
    "üëâ In short, **Unicode makes Python global** ‚Äî you can write programs that work with any language, symbol, or emoji without worrying about compatibility.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77812623-b2c8-4270-8450-4df2cc314482",
   "metadata": {},
   "source": [
    "### "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "463c2dd6-c518-4001-904e-3d6b5a961327",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "# **Unicode in Python**\n",
    "\n",
    "* **Unicode** is a universal character encoding standard that assigns a unique number to every character, symbol, or emoji across all languages.\n",
    "* Python uses **Unicode (UTF-8 by default)** to represent text, which means it can handle characters from English, Hindi, Chinese, Arabic, emojis, and many more.\n",
    "\n",
    "### üìå Why Unicode is Important?\n",
    "\n",
    "* Makes Python programs work across different languages and platforms.\n",
    "* Helps avoid errors when dealing with special characters.\n",
    "* Supports modern applications (e.g., multilingual websites, chat apps with emojis).\n",
    "\n",
    "üëâ Example in plain words: The letter **‚ÄúA‚Äù** has Unicode code `U+0041`, and the emoji **üòä** has Unicode code `U+1F60A`. Python can handle both easily because of Unicode.\n",
    "\n",
    "---\n",
    "\n",
    "# **Literals in Python**\n",
    "\n",
    "A **literal** is a fixed value written directly in the code. It represents data without needing computation.\n",
    "\n",
    "Python has several types of literals:\n",
    "\n",
    "1. **Numeric Literals**\n",
    "\n",
    "   * Whole numbers, decimals, or complex numbers.\n",
    "   * Example: `10`, `3.14`, `2+3j`.\n",
    "\n",
    "2. **String Literals**\n",
    "\n",
    "   * Text written inside quotes (single, double, or triple).\n",
    "   * Example: `\"Hello\"`, `'Python'`, `'''Multiline text'''`.\n",
    "\n",
    "3. **Boolean Literals**\n",
    "\n",
    "   * Represent truth values: `True` or `False`.\n",
    "\n",
    "4. **Special Literal**\n",
    "\n",
    "   * `None` represents the absence of a value or null.\n",
    "\n",
    "5. **Collection Literals**\n",
    "\n",
    "   * Directly written lists, tuples, sets, or dictionaries.\n",
    "   * Example: `[1, 2, 3]`, `(10, 20)`, `{\"a\": 1, \"b\": 2}`.\n",
    "\n",
    "---\n",
    "\n",
    "## üìå Quick Recap\n",
    "\n",
    "* **Unicode** ‚Üí Ensures Python can handle all characters and symbols from any language.\n",
    "* **Literals** ‚Üí Fixed values written directly in the code (like numbers, strings, True/False, None, lists, etc.).\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83f9f482-3216-4f4d-b6b2-af12e810c219",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
